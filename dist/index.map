{"version":3,"sources":["index.js"],"names":["h","type","props","children","createElement","node","document","createTextNode","$el","undefined","Object","entries","map","p","setAttrs","forEach","appendChild","bind","objecttoInlineStyle","o","inline","s","replace","toLowerCase","getStyle","style","inlineStyle","addEventListener","event","cb","e","substring","prop","startsWith","setAttribute","remAttr","name","value","removeEventListener","removeAttribute","setAttr","diff","node1","node2","updateAttr","$target","newVal","oldVal","removeAttr","updateAttrs","newProps","oldProps","assign","keys","patch","$parent","newNode","oldNode","index","replaceChild","childNodes","newLength","length","oldLength","i","removeChild","module","exports"],"mappings":"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","file":"index.map","sourceRoot":"..\\src","sourcesContent":["let h = (type, props, ...children) => {\r\n     return { type, props, children }\r\n}\r\n\r\n\r\nlet createElement = (node) => {\r\n  if(typeof node.type === 'object') {\r\n    node = node.type\r\n  }\r\n  if (typeof node === 'string') {\r\n    return document.createTextNode(node)\r\n  }\r\n if (typeof node.type =='function'){\r\n   node = node.type(node.props)\r\n }\r\n  const $el = typeof node.type == 'string'? document.createElement(node.type) : document.createElement(node.type)\r\n \r\n  \r\n  if(node.props != undefined || node.props != null){\r\n    Object.entries(node.props).map( (p) => {setAttrs($el, p)})\r\n  }\r\n  node.children\r\n    .map(createElement)\r\n    .forEach($el.appendChild.bind($el))\r\n  return $el;\r\n}\r\n\r\nlet objecttoInlineStyle = (o) =>{\r\n    let inline =''\r\n    Object.entries(o).map( (s)=>{\r\n        inline += s[0].replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase()+':'+s[1]+';'\r\n    })\r\n    return inline\r\n}\r\n\r\nlet getStyle = (style) =>{\r\n    let inlineStyle = ''\r\n    if (typeof style === 'string'){\r\n        inlineStyle =  style\r\n    }else {\r\n        inlineStyle = objecttoInlineStyle(style)\r\n    }\r\n    return inlineStyle\r\n}\r\n\r\nlet addEventListener = ( $el, event, cb) =>{\r\n    let e = event.substring(2)\r\n    $el.addEventListener(e,cb)\r\n}\r\n\r\nlet setAttrs= ($el, prop) => {\r\n    if( prop[0].startsWith(\"on\") ){\r\n       addEventListener($el,prop[0],prop[1])\r\n    }else if (prop[0] =='style'){\r\n        $el.setAttribute(prop[0],getStyle(prop[1]))\r\n    }else{\r\n        $el.setAttribute(prop[0], prop[1])\r\n    }\r\n}\r\n\r\nlet remAttr= ($el, name, value) => {\r\n    if( name.startsWith(\"on\") ){\r\n        removeEventListener($el,name ,value)\r\n     }else if (name =='style'){\r\n         $el.removeAttribute(name,getStyle(value))\r\n     }else{\r\n         $el.removeAttribute(name, value)\r\n     }\r\n}\r\n\r\nlet setAttr= ($el, name, value) => {\r\n    if( name.startsWith(\"on\") ){\r\n        addEventListener($el,name ,value)\r\n     }else if (name =='style'){\r\n         $el.setAttribute(name,getStyle(value))\r\n     }else{\r\n         $el.setAttribute(name, value)\r\n     }\r\n}\r\n\r\n\r\nlet diff = (node1, node2) => {\r\n  return typeof node1 !== typeof node2 ||\r\n         typeof node1 === 'string' && node1 !== node2 ||\r\n         node1.type !== node2.type\r\n}\r\n\r\nlet updateAttr = ($target, name, newVal, oldVal) => {\r\n    if (!newVal) {\r\n      removeAttr($target, name, oldVal)\r\n    } else if (!oldVal || newVal !== oldVal) {\r\n      setAttr($target, name, newVal)\r\n    }\r\n}\r\n\r\nlet updateAttrs = ($target, newProps, oldProps = {}) => {\r\n    const props = Object.assign({}, newProps, oldProps);\r\n    Object.keys(props).forEach(name => {\r\n      updateAttr($target, name, newProps[name], oldProps[name]);\r\n    });\r\n  }\r\n\r\nlet patch = ($parent,newNode, oldNode, index = 0) => {\r\n  if (!oldNode) {\r\n    $parent.appendChild(\r\n      createElement(newNode)\r\n    );\r\n  } else if (!newNode) {\r\n    $parent.removeChild(\r\n      $parent.childNodes[index]\r\n    );\r\n  } else if (diff(newNode, oldNode)) {\r\n    $parent.replaceChild(\r\n      createElement(newNode),\r\n      $parent.childNodes[index]\r\n    )\r\n  } else if (newNode.type) {\r\n    updateAttrs(\r\n        $parent.childNodes[index],\r\n        newNode.props,\r\n        oldNode.props\r\n      )\r\n    const newLength = newNode.children.length;\r\n    const oldLength = oldNode.children.length;\r\n    for (let i = 0; i < newLength || i < oldLength; i++) {\r\n      patch(\r\n        $parent.childNodes[index],\r\n        newNode.children[i],\r\n        oldNode.children[i],\r\n        i\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  h: h,\r\n  patch: patch\r\n}\r\n"]}